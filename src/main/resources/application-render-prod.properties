# Render Production Profile - PostgreSQL with optimized settings
server.port=${PORT:8080}
server.servlet.context-path=/

# Database configuration handled by RenderDataSourceConfig.java
# No explicit datasource configuration needed here

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Performance optimizations
spring.main.lazy-initialization=false
spring.jpa.open-in-view=false

# CORS Configuration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Security settings
server.error.include-message=always
server.error.include-binding-errors=always

# Management endpoints
management.endpoints.enabled-by-default=true
management.endpoint.health.enabled=true
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized

# Logging
logging.level.root=INFO
logging.level.com.styler=DEBUG
logging.pattern.console=%d{HH:mm:ss} %-5level %logger{36} - %msg%n

# Application info
styler.app.name=Styler E-commerce Backend
styler.app.version=1.0.0
styler.app.mode=render-production