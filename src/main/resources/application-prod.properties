# Production Configuration for Render
server.port=${PORT:8080}
server.servlet.context-path=/

# Database Configuration - Render PostgreSQL (automatically provided)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/styler}
spring.datasource.username=${PGUSER:postgres}
spring.datasource.password=${PGPASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Settings for Render
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# JPA Configuration for PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Prevent startup failure on DB connection issues - CRITICAL for Render
spring.jpa.open-in-view=false
spring.datasource.continue-on-error=true
spring.sql.init.continue-on-error=true

# Make database connection NON-BLOCKING for startup
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Database validation and resilience - More forgiving timeouts
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.initialization-fail-timeout=1
spring.datasource.hikari.leak-detection-threshold=60000

# SSL Configuration for Render - Optional SSL mode
spring.datasource.hikari.data-source-properties.sslmode=prefer
spring.datasource.hikari.data-source-properties.prepareThreshold=0

# CORS Configuration
spring.web.cors.allowed-origins=${CORS_ORIGINS:*}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Management endpoints for health checks - Simplified for Render
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=never
management.health.db.enabled=false
management.server.port=${PORT:8080}
management.endpoint.health.probes.enabled=false

# Disable problematic health indicators that require database
management.health.diskspace.enabled=false
management.health.datasource.enabled=false

# Logging Configuration
logging.level.com.styler=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.boot=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Application Configuration
styler.app.name=Styler E-commerce Backend
styler.app.version=1.0.0

# Production optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true